# Maninka morphotactic patterns

# macro definitions
macro   @nasal-v@       <re>.*[aoeuiɔɛ]n</re>
macro   @nonnasal-v@    <re>.*[aoeuiɔɛ][^n]?</re>

# processing instructions
plan
for token:
stage 0 add sequential parse common_inflection
stage 0 add parallel parse v_inflection 
stage 0 apply lookup
return if parsed
stage 1 add sequential parse common_derivation
stage 1 add parallel parse v_derivation
stage 1 add parallel parse v_prefixes
stage 1 add parallel parse n_derivation
stage 1 add parallel parse vq_derivation
stage 1 apply lookup
return if parsed
stage 2 add parallel parse reduplication
stage 2 apply lookup
return if parsed
stage 3 add parallel decompose pos_composition
return if parsed

## INFLECTION

# nominal/common inflection
section common_inflection
# -` ART
pattern :n/adj/ptcp/n.prop: [ {|<re>`</re>}:: ] | :n/adj/ptcp/n.prop: [:n/adj/ptcp/n.prop: :mrph:ART]

section v_inflection
# verbal inflection
# -la/-na INF
pattern :v: [ {@nonnasal-v@|<re>la[\u0300\u0301]</re>}:: ] | :v: [:v: :mrph:INF.LA]
pattern :v: [ {@nasal-v@|<re>na[\u0300\u0301]</re>}:: ] | :v: [:v: :mrph:INF.LA]
# -san IMMED
pattern :v: [ {|<re>sa[\u0300\u0301]n</re>}:: ] | :v: [:v: :mrph:IMMED] 
# participles
# -nin/-nɛn PTCP.RES
pattern :v/ptcp: [ {|<re>ni[\u0300\u0301]n</re>}:: ] | :ptcp: [:v: :mrph:PTCP.RES]
pattern :v/ptcp: [ {|<re>nɛ[\u0300\u0301]n</re>}:: ] | :ptcp: [:v: :mrph:PTCP.RES]
# -ta PTCP.POT
pattern :v/ptcp: [ {|<re>ta[\u0300\u0301]</re>}:: ] | :ptcp: [:v: :mrph:PTCP.POT]
# -tɔ PTCP.PROG
pattern :v/ptcp: [ {|<re>tɔ[\u0300\u0301]</re>}:: ] | :ptcp: [:v: :mrph:PTCP.PROG]
# -bali PTCP.NEG
pattern :v/ptcp: [ {|<re>ba[\u0300\u0301]li[\u0300\u0301]</re>}:: ] | :ptcp: [:v: :mrph:PTCP.NEG]

## DERIVATION

section common_derivation
# -ya/-ɲa ABSTR
pattern :n/v: [ {|<re>ya[\u0300\u0301]</re>}:: ] | :n: [:n/adj/ptcp: :mrph:ABSTR]
pattern :n/v: [ {|<re>ɲa[\u0300\u0301]</re>}:: ] | :n: [:n/adj/ptcp: :mrph:ABSTR]
# -nin DIM
pattern :n/adj/ptcp: [ {|<re>ni[\u0300\u0301]n</re>}:: ] | :n/adj/ptcp: [ :n/adj/ptcp: :mrph:DIM ] 
# -ba AUGM
pattern :n/adj/ptcp: [ {|<re>ba[\u0300\u0301]</re>}:: ] | :n/adj/ptcp: [ :n/adj/ptcp: :mrph:AUG ]
# -nte AG.EX
pattern :n: [ {|<re>nte[\u0300\u0301]</re>}:: ] | :n: [ :n/adj/v: :mrph:AG.EX ] 
# ‑ɲɔɔn RECP
pattern :n: [ {|<re>ɲɔ[\u0300\u0301]ɔn</re>}:: ] | :n: [ :v/n: :mrph:RECP]


# verbal derivation
section v_derivation
# -baa AG.OCC
pattern :n/adj: [ {|<re>ba[\u0300\u0301]a</re>}:: ] | :n/adj: [ :v: :mrph:AG.OCC ]
# -la/-na AG.PRM
pattern :n: [ {@nonnasal-v@|<re>la[\u0300\u0301]</re>}:: ] | :n: [ :v: :mrph:AG.PRM ] 
pattern :n: [ {@nasal-v@|<re>la[\u0300\u0301]</re>}:: ] | :n: [ :v: :mrph:AG.PRM ] 
# -lan/-nan/-ran INSTR
pattern :n: [ {@nonnasal-v@|<re>la[\u0300\u0301]n</re>}:: ] | :n: [ :v: :mrph:INSTR]
pattern :n: [ {@nasal-v@|<re>na[\u0300\u0301]n</re>}:: ] | :n: [ :v: :mrph:INSTR]
# -li/-nin NMLZ
pattern :n: [ {@nonnasal-syl@|<re>li[\u0300\u0301]</re>}:: ] | :n: [ :v: :mrph:NMLZ]
pattern :n: [ {@nasal-syl@|<re>ni[\u0300\u0301]n</re>}:: ] | :n: [ :v: :mrph:NMLZ]

section v_prefixes
# lá-/ná- CAUS
pattern :v: [ {la\u0301|}:: ] | :v: [ :mrph:CAUS :v: ] 
pattern :v: [ {na\u0301|}:: ] | :v: [ :mrph:CAUS :v: ] 
# mà- SUPER
pattern :v: [ {ma\u0301|}:: ] | :v: [ :mrph:SUPER :v: ]
# dɔ́ ~ rɔ́-/nɔ́ IN
pattern :v: [ {dɔ\u0301|}:: ] | :v: [ :mrph:IN :v: ] 
pattern :v: [ {rɔ\u0301|}:: ] | :v: [ :mrph:IN :v: ] 
pattern :v: [ {nɔ\u0301|}:: ] | :v: [ :mrph:IN :v: ] 

section n_derivation
# -laka LOC.GENT
pattern :n/n.prop: [ {|<re>la[\u0300\u0301]|ka[\u0300\u0301]</re>}:: ] | :n/n.prop: [ :n/n.prop: :mrph:LOC :mrph:GENT ] 
# -ka  GENT
pattern :n/n.prop: [ {|<re>ka[\u0300\u0301]</re>}:: ] | :n/n.prop: [ :n/n.prop: :mrph:GENT ]
# -la/-na LOC
pattern :n/n.prop: [ {@nonnasal-v@|<re>la[\u0300\u0301]</re>}:: ] | :n/n.prop: [:n/n.prop: :mrph:LOC]
pattern :n/n.prop: [ {@nasal-v@|<re>na[\u0300\u0301]</re>}:: ] | :n/n.prop: [:n/n.prop: :mrph:LOC]
# -ntan PRIV
pattern :adj/n: [ {|<re>nta[\u0300\u0301]n</re>}:: ] | :adj/n: [ :n: :mrph:PRIV]
# -ma COM
pattern :n: [ {|<re>ma[\u0300\u0301]</re>}:: ] | :adj/n: [ :n: :mrph:COM]
# -nan ORD
pattern :num: [ {|<re>na[\u0300\u0301]n</re>}:: ] | :adj: [ :num: :mrph:ORD ]
# -ta FOC.ADJ
pattern :adj: [ {|<re>ta[\u0300\u0301]</re>}:: ] | :adj: [ :adj: :mrph:FOC.ADJ ]
# -tɔ ST
pattern :n/adj: [ {|<re>tɔ[\u0300\u0301]</re>}:: ] | :n/adj: [ :n: :mrph:ST ] 


# vq derivation
section vq_derivation
# -man ADJ
pattern :vq: [ {|<re>ma[\u0300\u0301]n</re>}:: ] | :adj: [ :vq: :mrph:ADJ ]
# -ya/-ɲa DEQU
pattern :vq: [ {@nonnasal-v@|<re>ya[\u0300\u0301]</re>}:: ] | :n/v: [ :vq: :mrph:DEQU]
pattern :vq: [ {@nasal-v@|<re>ɲa[\u0300\u0301]</re>}:: ] | :n/v: [ :vq: :mrph:DEQU]

## reduplication
section reduplication
pattern :v: [ {<re>(?P<stem>.+)</re>|<re>(?P=stem)</re>}:: ] | :v: [ :v: :v: ]
pattern :adj: [ {<re>(?P<stem>.+)</re>|<re>(?P=stem)</re>}:: ] | :adj: [ :adj: :adj: ]
pattern :num: [ {<re>(?P<stem>.+)</re>|<re>(?P=stem)</re>}:: ] | :num: [ :num: :num: ]
pattern :v: [ {<re>(?P<stem>.+)</re>|-|<re>(?P=stem)</re>}:: ] | :v: [ :v: :: :v: ]
pattern :adj: [ {<re>(?P<stem>.+)</re>|-|<re>(?P=stem)</re>}:: ] | :adj: [ :adj: :: :adj: ]
pattern :num: [ {<re>(?P<stem>.+)</re>|-|<re>(?P=stem)</re>}:: ] | :num: [ :num: :: :num: ]
pattern :v: [ {<re>(?P<stem>.+)</re>|<re>(?P=stem)</re>|<re>(?P=stem)</re>}:: ] | :v: [ :v: :v: :v: ]
pattern :adj: [ {<re>(?P<stem>.+)</re>|<re>(?P=stem)</re>|<re>(?P=stem)</re>}:: ] | :adj: [ :adj: :adj: :adj: ]

## composition
# general part-of-speech composition patterns
#
# two-word composites
section pos_composition
# v/n + n = n
pattern :n: [ :n/v: :n: ] | :n: [ :n/v: :n: ]
# n + v = n/v
pattern :n/v: [ :n: :v: ] | :n/v: [ :n: :v: ]
# n + adj/num = n
pattern :n: [ :n: :adj/num: ] | :n: [ :n: :adj/num: ]
# dtm + v = n
pattern :n: [ :dtm: :v: ] | :n: [ :dtm: :v: ]
# three-word composites
# n + adj/pp + n = n
pattern :n: [ :n: :adj/pp: :n: ] | :n: [ :n: :adj/pp: :n: ]
# n + pp + n + n = n
pattern :n: [ :n: :pp: :n: :n: ] | :n: [ :n: :pp: :n: :n: ]
# dtm/n + v + n = n
pattern :n: [ :dtm/n: :v: :n: ] | :n: [ :dtm/n: :v: :n: ]
# n + pp + v = n/v
pattern :n/v: [ :n: :pp: :v: ] | :n/v: [ :n: :pp: :v: ]


